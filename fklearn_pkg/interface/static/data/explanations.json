{
    "BinaryLabelDatasetMetric (num_positives)": "Compute the number of positives",
    "BinaryLabelDatasetMetric (num_negatives)": "Compute the number of negatives",
    "BinaryLabelDatasetMetric (base_rate)": "Compute the base rate, 'Pr(Y = 1) = P/(P+N)'",
    "BinaryLabelDatasetMetric (disparate_impact)": "'Pr(Y = 1 | D = unprivileged) / Pr(Y = 1 | D = privileged)'",
    "BinaryLabelDatasetMetric (statistical_parity_difference)": "'Pr(Y = 1 | D = unprivileged) - Pr(Y = 1 | D = privileged)'",
    "UnifiedMetricLibrary (num_true_positives)": "Return the number of instances in the dataset where both the predicted and true labels are 'favorable'",
    "UnifiedMetricLibrary (num_false_positives)": "Return the number of false positives",
    "UnifiedMetricLibrary (num_false_negatives)": "Return the number of false negatives",
    "UnifiedMetricLibrary (num_true_negatives)": "Return the number of true negatives",
    "UnifiedMetricLibrary (num_generalized_true_positives)": "Return the generalized number of true positives, the weighted sum of predicted scores where true labels are 'favorable'",
    "UnifiedMetricLibrary (num_generalized_false_positives)": "Return the generalized number of false positives, the weighted sum of predicted scores where true labels are 'favorable'",
    "UnifiedMetricLibrary (num_generalized_false_negatives)": "Return the generalized number of false negatives, the weighted sum of predicted scores where true labels are 'favorable'",
    "UnifiedMetricLibrary (num_generalized_true_negatives)": "Return the generalized number of true negatives, the weighted sum of predicted scores where true labels are 'favorable'",
    "UnifiedMetricLibrary (true_positive_rate)": "Return the ratio of true positives to positive examples in the dataset; 'TPR = TP/P'",
    "UnifiedMetricLibrary (false_positive_rate)": "'FPR = FP/N'",
    "UnifiedMetricLibrary (false_negative_rate)": "'FNR = FN/P'",
    "UnifiedMetricLibrary (true_negative_rate)": "'TNR = TN/N'",
    "UnifiedMetricLibrary (generalized_true_positive_rate)": "Return the ratio of generalized true positives to positive examples in the dataset; 'GTPR = GTP/P'",
    "UnifiedMetricLibrary (generalized_false_positive_rate)": "'GFPR = GFP/N'",
    "UnifiedMetricLibrary (generalized_false_negative_rate)": "'GFNR = GFN/P'",
    "UnifiedMetricLibrary (generalized_true_negative_rate)": "'GTNR = GTN/N'",
    "UnifiedMetricLibrary (positive_predictive_value)": "'PPV = TP/(TP + FP)'",
    "UnifiedMetricLibrary (false_discovery_rate)": "'FDR = FP/(TP + FP)'",
    "UnifiedMetricLibrary (false_omission_rate)": "'FOR = FN/(TN + FN)'",
    "UnifiedMetricLibrary (negative_predictive_value)": "'NPV = TN/(TN + FN)'",
    "UnifiedMetricLibrary (accuracy)": "'ACC = (TP + TN)/(P + N)'",
    "UnifiedMetricLibrary (error_rate)": "'ERR = (FP + FN)/(P + N)'",
    "UnifiedMetricLibrary (true_positive_rate_difference)": "'TPR(D = unprivileged) - TPR(D = privileged)'",
    "UnifiedMetricLibrary (false_positive_rate_difference)": "'FPR(D = unprivileged) - FPR(D = privileged)'",
    "UnifiedMetricLibrary (false_negative_rate_difference)": "'FNR(D = unprivileged) - FNR(D = privileged)'",
    "UnifiedMetricLibrary (false_omission_rate_difference)": "'FOR(D = unprivileged) - FOR(D = privileged)",
    "UnifiedMetricLibrary (false_discovery_rate_difference)": "'FDR(D = \text{unprivileged) - FDR(D = privileged)'",
    "UnifiedMetricLibrary (false_positive_rate_ratio)": "'FPR(D = unprivileged) / FPR(D = privileged)'",
    "UnifiedMetricLibrary (false_negative_rate_ratio)": "'FNR(D = unprivileged) / FNR(D = privileged)'",
    "UnifiedMetricLibrary (false_omission_rate_ratio)": "'FOR(D = unprivileged) / FOR(D = privileged)'",
    "UnifiedMetricLibrary (false_discovery_rate_ratio)": "'FDR(D = unprivileged) / FDR(D = privileged)'",
    "UnifiedMetricLibrary (average_odds_difference)": "Average of difference in FPR and TPR for unprivileged and privileged groups",
    "UnifiedMetricLibrary (average_abs_odds_difference)": "Average of absolute difference in FPR and TPR for unprivileged andprivileged groups",
    "UnifiedMetricLibrary (error_rate_difference)": "Difference in error rates for unprivileged and privileged groups; ERR(D = unprivileged) - ERR(D = privileged)",
    "UnifiedMetricLibrary (error_rate_ratio)": "Ratio of error rates for unprivileged and privileged groups; 'ERR(D = unprivileged) / ERR(D = privileged)",
    "UnifiedMetricLibrary (num_pred_positives)": "Return the number of predicted positives",
    "UnifiedMetricLibrary (num_pred_negatives)": "Return the number of predicted negatives",
    "UnifiedMetricLibrary (selection_rate)": "'Pr(Y_hat = favorable)'",
    "UnifiedMetricLibrary (disparate_impact)": "'Pr(Y_hat = 1 | D = unprivileged) / Pr(Y_hat = 1 | D = privileged)'",
    "UnifiedMetricLibrary (statistical_parity_difference)": "'Pr(Y_hat = 1 | D = unprivileged) - Pr(Y_hat = 1 | D = privileged)'",
    "UnifiedMetricLibrary (theil_index)": "Generalized entropy index with alpha = 1",
    "UnifiedMetricLibrary (coefficient_of_variation)": "Two times the square root of the generalized entropy index with alpha = 2",
    "UnifiedMetricLibrary (between_group_theil_index)": "The 'between group generalized entropy index' with alpha = 1",
    "UnifiedMetricLibrary (between_group_coefficient_of_variation)": "Two times the square root of the 'between group generalized entropy index' with alpha = 2",
    "UnifiedMetricLibrary (between_all_groups_theil_index)": "The 'between all groups generalized entropy index' with alpha = 1",
    "UnifiedMetricLibrary (between_all_groups_coefficient_of_variation)": "Two times the square root of the 'between all groups generalized entropy index' with alpha = 2",
    "UnifiedMetricLibrary (equal_opportunity_difference)": "'TPR(D = unprivileged) - TPR(D = privileged)'",
    "UnifiedMetricLibrary (power)": "Return the number of instances in the dataset where both the predicted and true labels are 'favorable'",
    "UnifiedMetricLibrary (precision)": "'Precision = TP/(TP + FP)'",
    "UnifiedMetricLibrary (recall)": "'Recall = TP/P'",
    "UnifiedMetricLibrary (sensitivity)": "'Sensitivity = Recall = TP/P'",
    "UnifiedMetricLibrary (specificity)": "'Specificity = TN/N'",
    "UnifiedMetricLibrary (accuracy_score)": "Fraction of correct predictions",
    "CausalDiscriminationScore": "The fraction of inputs for which changing at least one of those characteristics causes the output to change",
    "GroupDiscriminationScore": "A vaive Bayes approach for discrimination-free classification"
}